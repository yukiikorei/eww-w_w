;==============================wifi====================================

(defpoll wifi_info :interval "3s" "script/wifi.sh 'get_wifi_state'")

(defwidget wifi []
    (box :orientation "horizontal"
         :class "wifi-box"
         :space-evenly false
        (button :class "wifi-ap"
            :onclick "script/wifi.sh toggle_wifi"
            :style "background-color:${wifi_info.color}; "
            "󰤨  ${wifi_info.ssid}" 
        )
        (button :class "wifi-show"
            :onclick "./wincontrol.sh toggle_window wifilist"
            " > "          
        )

    )
)

(defpoll wifi_select_button :interval "5s" "script/wifi.sh 'get_wifi_info'" )

(defwidget wifilist_widget []
    (literal :content wifi_select_button) ;button class "wifiselect"
)

;============================bt===========================

(defpoll bt_state :interval "3s" "script/bluetooth.sh 'get_bt_state'")

(defwidget bt_state []
   (box :orientation "horizontal"
        (button :class "bt-name"
                :onclick "script/bluetooth.sh 'toggle_bt'"
                :style "background: ${bt_state.color};"
            "󰂯 ${bt_state.state}")
    )
)

; ========================== music ====================

(defpoll music_cover :interval "3s" "script/music.sh get_album_cover")
(defpoll music_name :interval "3s" "script/music.sh get_play_title")
(defpoll music_artist :interval "3s" "script/music.sh get_play_artist")
(defpoll music_status_icon :interval "3s" "script/music.sh get_play_status_icon")


(defwidget music [] 
	(box :class "genwin" :orientation "h" 
         ;:space-evenly "false"
         :vexpand "false" :hexpand "middle"
        (box :halign "center" :space-evenly "false"
		(box :class "album_art" :vexpand "false" :hexpand "false" 
              :style "background-image: url('${music_cover}');"
        )
		(box :orientation "v" :spacing 6 :space-evenly "false" 
            :vexpand "false" :hexpand "false" :class "play-control"
			(label :halign "center" :class "song" :wrap "true" 
                   :limit-width 13 :text '${music_name}' )
			(label :halign "center" :class "artist" :wrap "true" 
                   :limit-width 13 :text '${music_artist}' )
			(box :orientation "h" :spacing 28 :halign "center" 
                 :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" 
                        :onclick "script/music.sh play_pre_song" "<<")
				(button :class "btn_play" 
                        :onclick "script/music.sh toggle_play_music" 
                        "${music_status_icon}"
                )
				(button :class "btn_next" 
                        :onclick "script/music.sh play_next_song" ">>"))
			(box :class "music_bar" :halign "center" 
                 :vexpand "false" :hexpand "false" 
				(scale :onscroll "" 
                       :min 0 :active "true" :max 100 
                        ;:value CURRENT
                )
            )
        )
        )
    )
)

;===========================volume==============================

(defpoll cur_volume :interval "5s" "script/volume.sh get_volume")

(defwidget volume []
    (box 
        :class "volume-bar" 
        :vexpand "false" :hexpand "false"
        :space-evenly false
        (button :class "mute"
            " "
        )
        (scale 
            :label "a"
            :onchange `script/volume.sh set_volume {}`
            :min 0 
            :active "true"
            :max 101
            :value "${cur_volume}"
        )
    )
)

;============================brightness=========================


(defpoll cur_brightness :interval "5s" "script/brightness.sh get_brightness")

(defwidget brightness []
    (box 
        :class "brightness-bar" 
        :vexpand "false" :hexpand "false" 
        :space-evenly false
        (label :class "brightness-sign"
            :text " "
        )
        (scale 
            :onchange `script/brightness.sh set_brightness {}`
            :min 10 :active "true" :max 256
            :value "${cur_brightness}"
        )
    )
)

(defwidget system []
    (box :orientation "h"
         ;:halign "center"
        (button :class "boot" 
            "⏻ ")
        (button :class "battery" 
            " ")
        (button :class "close" 
                :onclick "./wincontrol.sh close_all_windows"
            "")
    )
)

;===========================windows====================================

(defwindow system_win
    :monitor 0
    :geometry (geometry :x "12px"
                        :y "10px"
                        :width "300px"
                        :height "25px"
                        :anchor "top left")
    :stacking "fg"
    :wm-ignore false
    (system)
)


(defwindow music_win
    :monitor 0
    :geometry (geometry :x "12px"
                        :y "40px"
                        :width "300px"
                        :height "90px"
                        :anchor "top left")
    :stacking "fg"
    :wm-ignore false
    (music)
)

(defwindow wifilist
           :monitor 0 ;such as '["<primary>" "HDMI-A-1" "PHL 345B1C" 0]'
           :geometry (geometry :x "320px"
                               :y "40px"
                               :width "300px"
                               :height "1000px"
                               :anchor "top left"
                               :vexpand "false")
           :stacking "fg"
           ;:reserve (struts :distance "40px" :side "top")
           :windowtype "normal"
           :wm-ignore false
    (wifilist_widget)
)

(defwindow wifi_win
           :monitor 0 ;such as '["<primary>" "HDMI-A-1" "PHL 345B1C" 0]'
           :geometry (geometry :x "12px"
                               :y "135px"
                               :width "300px"
                               :height "30px"
                               :anchor "top left"
    )
           :stacking "fg"
           ;:reserve (struts :distance "40px" :side "top")
           :windowtype "normal"
           :wm-ignore false
    (wifi)
)

(defwindow bt_state_win
           :monitor 0 ;such as '["<primary>" "HDMI-A-1" "PHL 345B1C" 0]'
           :geometry (geometry :x "12px"
                               :y "170px"
                               :width "300px"
                               :height "30px"
                               :anchor "top left"
    )
           :stacking "fg"
           ;:reserve (struts :distance "40px" :side "top")
           :windowtype "normal"
           :wm-ignore false
    (bt_state)
)

(defwindow volume_win
           :monitor 0 ;such as '["<primary>" "HDMI-A-1" "PHL 345B1C" 0]'
           :geometry (geometry :x "12px"
                               :y "205px"
                               :width "300px"
                               :height "30px"
                               :anchor "top left"
    )
           :stacking "fg"
           ;:reserve (struts :distance "40px" :side "top")
           :windowtype "normal"
           :wm-ignore false
    (volume)
)

(defwindow brightness_win
           :monitor 0 ;such as '["<primary>" "HDMI-A-1" "PHL 345B1C" 0]'
           :geometry (geometry :x "12px"
                               :y "240px"
                               :width "300px"
                               :height "30px"
                               :anchor "top left"
    )
           :stacking "fg"
           ;:reserve (struts :distance "40px" :side "top")
           :windowtype "normal"
           :wm-ignore false
    (brightness)
)
